{"version":3,"sources":["lib/firebase.js","pages/SignIn.js","constants/routes.js","features/userSlice.js","pages/logo.svg","pages/Nav.js","axios.js","pages/requests.js","pages/Banner.js","pages/Home.js","App.js","reportWebVitals.js","serviceWorker.js","app/store.js","index.js"],"names":["firebaseapp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","emailRef","useRef","passwordRef","history","useHistory","className","ref","type","placeHolder","onClick","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","push","catch","error","alert","message","createUserWithEmailAndPassword","userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","Nav","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","original_name","overview","substr","Home","App","useSelector","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","email","excat","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","configureStore","reducer","userReducer","ReactDOM","render","store","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qYAcMA,G,qBAAaC,EAASC,cAZL,CAEnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,mBACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,mBACnBC,MAAO,mBACPC,cAAe,sBAKbC,GADIX,EAAYY,YACXZ,EAAYW,Q,OCVR,SAASE,IACtB,IAAMC,EAAUC,iBAAO,MACjBC,EAAYD,iBAAO,MACnBE,EAAUC,cAyBhB,OACC,mCACG,qBAAKC,UAAU,qBAAf,SACA,iCACC,yCACC,uBAAQC,IAAKN,EAAWK,UAAW,oBAAoBE,KAAM,QAAQC,YAAY,UACjF,uBAAQF,IAAKJ,EAAaG,UAAW,uBAAuBE,KAAK,WAAWC,YAAY,aACxF,wBAAQH,UAAU,qBAAqBE,KAAM,SAASE,QA/B5C,SAACC,GACbA,EAAEC,iBACDd,EAAKe,2BACFZ,EAASa,QAAQC,MACjBZ,EAAYW,QAAQC,OACpBC,MAAK,SAACC,GACNC,QAAQC,IAAIF,GACZb,EAAQgB,KCjBE,QDkBTC,OAAM,SAACC,GACRC,MAAMD,EAAME,aAsByDf,YAAY,UAAnF,qBACL,+BACK,sBAAMH,UAAU,2BAAhB,+BACA,sBAAMA,UAAU,wBAAwBI,QArBvB,SAACC,GACpBA,EAAEC,iBACDd,EAAK2B,+BACFxB,EAASa,QAAQC,MACjBZ,EAAYW,QAAQC,OACpBC,MAAK,SAACC,GACNC,QAAQC,IAAIF,MACXI,OAAM,SAACC,GACRC,MAAMD,EAAME,aAad,oC,+BE1CKE,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAAc,CACZC,KAAK,MAEPC,SAAU,CACNC,MAAO,SAACC,EAAOC,GACfD,EAAMH,KAAOI,EAAOC,SAErBC,OAAQ,SAACH,GACRA,EAAMH,KAAO,S,EAKcJ,EAAUW,QAA5BL,E,EAAAA,MAAOI,E,EAAAA,OAETE,EAAa,SAACL,GAAD,OAAWA,EAAMH,KAAKA,MAEjCJ,IAAf,Q,QCrBe,I,cCkCAa,I,mCC5BAC,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iCCHPC,EAAU,mCAcDC,EAZE,CAEbC,cAAc,8BAAD,OAAgCF,EAAhC,mBAChBG,sBAAsB,wBAAD,OAA0BH,EAA1B,qBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,OCqCJU,MA5Cf,WAAmB,IAeAC,EAAMC,EAfP,EACQC,mBAAS,IADjB,mBACXC,EADW,KACJC,EADI,KAmBd,OAhBJC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACsBpB,EAAMqB,IAAKjB,EAASE,uBAD1C,OACMgB,EADN,OAECJ,EACII,EAAQC,KAAKC,QACTC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,KAAKC,QAAQI,OAAO,KAJhE,4CADY,uBAAC,WAAD,wBASZC,KACD,IAOK,yBAAQhE,UAAU,SAClBiE,MAAO,CACHC,eAAgB,QAChBC,gBAAgB,4CAAD,cAA8Cf,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAOgB,cAArD,MACfC,mBAAoB,iBAJxB,UAOI,sBAAKrE,UAAU,mBAAf,UACH,oBAAIA,UAAU,gBAAd,UAAoC,OAALoD,QAAK,IAALA,OAAA,EAAAA,EAAOkB,SAAP,OAAgBlB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAO9B,QAAvB,OAA+B8B,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOmB,iBAElE,sBAAKvE,UAAU,kBAAf,UACC,wBAAQA,UAAU,iBAAlB,kBACD,wBAAQA,UAAU,iBAAlB,oBAEA,oBAAIA,UAAU,sBAAd,UAnBOiD,EAoBO,OAAEG,QAAF,IAAEA,OAAF,EAAEA,EAAOoB,SApBVtB,EAoBqB,KAnBpC,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKc,QAASb,EAAID,EAAIwB,OAAO,EAAGvB,EAAE,GAAK,MAAQD,WAuBtD,qBAAKjD,UAAU,2B,OC7BA0E,MARf,WACE,OACE,qBAAK1E,UAAU,YAAf,SACI,cAAC,EAAD,O,qBCkDO2E,MA3Cf,WAEC,IAAMnD,EAAMoD,YAAY5C,GAEnB6C,EAAWC,cAmBb,OAjBFxB,qBAAU,WAcZ,OAboB9D,EAAKuF,oBAAmB,SAACC,GACxCA,GACKpE,QAAQC,IAAImE,GACZH,EACEnD,EAAM,CACRuD,IAAID,EAASC,IACbC,MAAMF,EAASE,UAIrBL,EAAS/C,QAIX,IAGE,cAAC,IAAD,UACGN,EAID,8BAEE,cAAC,IAAD,UACE,cAAC,IAAD,CAAO2D,OAAK,EAACC,KAAK,IAAlB,SACC,cAAC,EAAD,UAPL,cAAC,EAAD,OC9BSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7E,MAAK,YAAkD,IAA/C8E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCKMO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfSC,cAAe,CAC5BC,QAAS,CACP3E,KAAM4E,KCKVC,IAASC,OACT,cAAC,IAAD,CAAUC,MAAQA,EAAlB,SACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGFC,SAASC,eAAe,SAM1BrB,IF6GM,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMnG,MAAK,SAAAoG,GACjCA,EAAaC,kB","file":"static/js/main.2b245d50.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n\n    apiKey: \"AIzaSyDUMA0o8xbGSp5qSlJ5kO3gInduF37QLuY\",\n    authDomain: \"gamingtest-f6b8c.firebaseapp.com\",\n    databaseURL: \"gamingtest-f6b8c\",\n    projectId: \"gamingtest-f6b8c\",\n    storageBucket: \"gamingtest-f6b8c.appspot.com\",\t\n    messagingSenderId: \"gamingtest-f6b8c\",\n    appId: \"gamingtest-f6b8c\",\n    measurementId: \"gamingtest-f6b8c\"\n};\n\nconst firebaseapp =firebase.initializeApp(firebaseConfig);\nconst db =firebaseapp.firestore();\nconst auth=firebaseapp.auth();\n\nexport {auth}\nexport default db;","import React, {useRef, useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport * as ROUTES from '../constants/routes';\nimport './SignIn.css';\nimport {auth} from '../lib/firebase';\n\nexport default function SignIn() {\n  const emailRef= useRef(null);\n  const passwordRef=useRef(null);\n  const history = useHistory();\n   const signIn = (e)=>{\n      e.preventDefault();\n       auth.signInWithEmailAndPassword(\n          emailRef.current.value,\n          passwordRef.current.value \n        ).then((authUser)=>{\n          console.log(authUser);\n          history.push(ROUTES.HOME);\n        }).catch((error)=>{\n          alert(error.message);\n        });\n     };\n\n        const register = (e) =>{\n      e.preventDefault();\n       auth.createUserWithEmailAndPassword(\n          emailRef.current.value,\n          passwordRef.current.value \n        ).then((authUser)=>{\n          console.log(authUser);\n        }).catch((error)=>{\n          alert(error.message);\n        });\n     };\n  return (\n   <>\n      <div className=\"LoginScreen_Header\">\n      <form>\n       <h1>Sign In</h1>\n        <input  ref={emailRef}  className =\"LoginScreen_email\" type =\"email\" placeHolder=\"Email\"/>\n        <input  ref={passwordRef} className =\"LoginScreen_password\" type=\"password\" placeHolder=\"Password\"/>\n        <button className=\"LoginScreen_button\" type =\"submit\" onClick={signIn} placeHolder=\"Sign In\">Sign In</button>\n   <h4>\n        <span className=\"LoginScreen_NewToNetflix\">New To DarkNinja?</span>\n        <span className=\"LoginScreen_signupnow\" onClick={register}>Sign Up now.</span>\n        </h4>\n      </form>\n    </div>\n    \n    </>\n  );\n}\n","export const HOME = '/';\nexport const BROWSE = '/browse';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const OTP = '/otp';\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user:null,\r\n  },\r\n  reducers: {\r\n      login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n     logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React , {useState ,useEffect} from 'react';\nimport './Nav.css';\n\nfunction Nav() {\n   const [show, handleShow] = useState(false) \n    \n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) { \n                handleShow(true);\n            }else{\n                handleShow(false);\n            }\n        });\n        return () => {\n           window.removeEventListener(\"scroll\");\n        }\n    }, []);\n\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <img \n            className=\"nav__logo\"\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/170px-Netflix_2015_logo.svg.png\" alt=\"Netflix Logo\"/>\n           \n            <img \n            className=\"nav__avatar\"\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n            alt=\"Netflix Logo\"\n            />\n     </div>\n    )\n}\n\nexport default Nav;\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","const API_KEY = \"fbbb70ebbc541fdfc9ea1731d01ee1b1\";\n\nconst requests = {\n\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n};\n\nexport default requests;","import React , {useState , useEffect} from 'react';\nimport axios from '../axios';\nimport requests  from './requests';\nimport  './Banner.css';\nfunction Banner() {\nconst [movie, setMovie] = useState([]);\n\nuseEffect(() => {\n    async function fetchData(){\n    const request = await axios.get (requests.fetchNetflixOriginals);\n     setMovie (\n         request.data.results[\n             Math.floor(Math.random() * request.data.results.length-1)\n         ]\n     )   \n}\n    fetchData();\n}, [])\n\nfunction truncate (str , n) {\nreturn str?.length > n ? str.substr(0, n-1) + \"...\" : str;\n}\n\n    return (\n        <header className=\"banner\" \n        style={{\n            backgroundSize: \"cover\",\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n            backgroundPosition: \"center center\",\n        }}\n        >\n            <div className=\"banner__contents\">\n         <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n         \n            <div className=\"banner__buttons\">\n             <button className=\"banner__button\">Play</button>\n            <button className=\"banner__button\">MyList</button>\n\n            <h1 className=\"banner__description\">\n                { truncate (movie?.overview , 150)}</h1>\n               </div>\n         </div>\n\n<div className=\"banner--fadebottom\"></div>\n        </header>\n    )\n}\n\nexport default Banner\n","import logo from './logo.svg';\nimport './Home.css';\nimport  Nav from './Nav';\nimport  Banner from './Banner';\nimport  Login from './Login';\n\nfunction Home() {\n  return (\n    <div className=\"Home_Page\">\n        <Banner />\n     </div>\n  );\n}\n\nexport default Home;\n","import React , {useState ,useEffect} from 'react';\r\nimport { BrowserRouter as Router,Switch,Route,Link,useRouteMatch,useParams} from 'react-router-dom';\r\nimport './App.css';\r\nimport SignIn from './pages/SignIn';\r\nimport OtpPage from './pages/OtpPage';\r\nimport {login,logout,selectUser} from \"./features/userSlice\";\r\nimport {Provider, useDispatch,useSelector} from \"react-redux\";\r\n import {auth} from './lib/firebase';\r\n import Home from './pages/Home.js';\r\n\r\n\r\n\r\nimport Coordinate from './geolocation/Coordinate';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\tconst user =useSelector(selectUser);\r\n\r\nconst dispatch = useDispatch();\r\n\r\n\t\tuseEffect(()=>{\r\nconst unsubscribe = auth.onAuthStateChanged((userAuth)=>{\r\n  if(userAuth){\r\n          console.log(userAuth);\r\n          dispatch(\r\n            login({\r\n          uid:userAuth.uid,\r\n          email:userAuth.email\r\n           })\r\n            );\r\n }else{\r\n    dispatch(logout);\r\n  }\r\n});\r\nreturn unsubscribe;\r\n},[]);\r\n\r\n    return (\r\n    <Router>\r\n    { !user ? (\r\n      <SignIn/>\r\n   \r\n      ):(\r\n      <div>\r\n\r\n        <Switch>\r\n          <Route excat path=\"/\">\r\n           <Home />\r\n          </Route>\r\n             </Switch>\r\n          \r\n      </div>\r\n       )}\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {render} from '@testing-library/react';\r\nimport store from './app/store';\r\n\r\nReactDOM.render(\r\n<Provider store ={store}>\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}